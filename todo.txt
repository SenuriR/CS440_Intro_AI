part 0: set up the environment
-50 gridworlds of size 101 by 101
-set all cells as unvisited
-Start from a random cel, mark it 



Read chapter 3 in textbook
- does it have forward
backward
adaptive


g should be updated by the actual distance ( parent to child should add 1)
h  is the actual calulated heuristic based on the manhattan distance (x2-x1) + (Y2-Y1)
if the block value = 1, set f value to -1 since it is blocked
F = G + h


the 2 smallest f value children get added to the binary heap & explored as part of the open list


where is the agent supposed to go? from one corner to another?
    
2/15 **************************************************************************************
Implementing the manhattan distance function
implementing the binary heap
*************************************************************************************
Things to do still:
    - Implement full A*

Part 1 - Understanding the methods [10 points]: 
Read the chapter in your textbook on uninformed and informed (heuristic) search and then read the project description again. Make sure that you understand A* and the concepts of
admissible and consistent h-values.
a) Explain in your report why the first move of the agent for the example search problem from Figure 8 is to the east rather
than the north given that the agent does not know initially which cells are blocked.
b) This project argues that the agent is guaranteed to reach the target if it is not separated from it by blocked cells. Give a convincing argument that the agent in finite gridworlds indeed 
either reaches the target or discovers that this is impossible in finite time. Prove that the number of moves of the agent until it reaches the target or 
discovers that this is impossible is bounded from above by the number of unblocked cells squared.

Part 2 - The Effects of Ties [15 points]: 
Repeated Forward A* needs to break ties to decide which cell to expand next if
several cells have the same smallest f-value. It can either break ties in favor of cells with smaller g-values or in favor of
cells with larger g-values. 

Implement and compare both versions of Repeated Forward A* with respect to their runtime or, equivalently, number of expanded cells. 
Explain your observations in detail, that is, explain what you observed and give a reason for the observation.

[Hint: For the implementation part, priorities can be integers rather than pairs of integers. For example, you can use
c × f(s) − g(s) as priorities to break ties in favor of cells with larger g-values, where c is a constant larger than the largest
g-value of any generated cell. For the explanation part, consider which cells both versions of Repeated Forward A* expand
for the example search problem from Figure 9.]

Part 3 - Forward vs. Backward [20 points]: 
Implement and compare Repeated Forward A* and Repeated Backward A*
with respect to their runtime or, equivalently, number of expanded cells. Explain your observations in detail, that is, explain
what you observed and give a reason for the observation. Both versions of Repeated A* should break ties among cells with
the same f-value in favor of cells with larger g-values and remaining ties in an identical way, for example randomly.

Part 4 - Heuristics in the Adaptive A* [20 points]: 
The project argues that “the Manhattan distances are consistent in gridworlds in which the agent can move only in the four main compass directions.” Prove that this is indeed the case.
Furthermore, it is argued that “The h-values hnew(s) ... are not only admissible but also consistent.” Prove that Adaptive A*
leaves initially consistent h-values consistent even if action costs can increase.

Part 5 - Heuristics in the Adaptive A* [15 points]: 
Implement and compare Repeated Forward A* and Adaptive A*
with respect to their runtime. Explain your observations in detail, that is, explain what you observed and give a reason for
the observation. Both search algorithms should break ties among cells with the same f-value in favor of cells with larger
g-values and remaining ties in an identical way, for example randomly.

Part 6 - Statistical Significance [10 points]: 
Performance differences between two search algorithms can be systematic
in nature or only due to sampling noise (= bias exhibited by the selected test cases since the number of test cases is always
limited). One can use statistical hypothesis tests to determine whether they are systematic in nature. Read up on statistical
hypothesis tests (for example, in Cohen, Empirical Methods for Artificial Intelligence, MIT Press, 1995) and then describe
for one of the experimental questions above exactly how a statistical hypothesis test could be performed. You do not need
to implement anything for this question, you should only precisely describe how such a test could be performed.
-----------------------------------------------------------------------------------------
https://www.when2meet.com/?23696617-Nvi8z

Individual Tasks:
        git stuff
    Senuri: Make sure neighbors are all initialized
    Archi: Binary heap
    Mateo: 

        Part 1 of 6
        Binary heap open list implementation
Next meetup: Archi & Mateo on Saturday 2/17
    Senuri:
    Archi:
    Mateo:

Next meetup: All on Saturday 2/20 6-10pm
    Senuri:
    Archi:
    Mateo:
Next meetup: Archi & Mateo on Thursday 2/22 10-12pm
    Senuri:
    Archi:
    Mateo:


